---
title: "Getting there: Exercises"
format: 
  html:
    code-fold: true
    code-summary: "Show the code solution"
---

# Instructions:

**Recommended:** Complete these exercises in the dedicated R in Pharma RStudio Cloud work space, which comes with

1. all packages pre-installed, and

2. an Rmarkdown document to fill in.

It may still be helpful to peek here to verify that your tables match the
desired output.

[Click here to enter R in Pharma RStudio Cloud work space for our workshop](https://rstudio.cloud/spaces/299322/join?access_code=Vnp96stsVIDLiEJI7AtHAQ4GB1gsptQgnOGb99_N){target="_blank"}

**Otherwise:** Follow along this document, work on your personal computer,
and challenge yourself not to peek at the code solutions until you have completed
the exercise.

# Exercise 1

Create a demographic table by using only dplyr. 

* The data should have only age, gender, and treatment columns. 
* The table should include the mean and standard deviation of age, the count and percentage.

```{r}
# Load necessary libraries
library(dplyr)

# Sample data frame with demographic data
set.seed(123)
data <- data.frame(
  id = 1:100,
  age = sample(18:80, 100, replace = TRUE),
  gender = sample(c("Male", "Female"), 100, replace = TRUE),
  treatment = sample(c("Treatment A", "Treatment B"), 100, replace = TRUE)
)

# Count participants per treatment group to get labels with counts
treatment_counts <- data |> 
  count(treatment) |> 
  mutate(treatment_label = paste0(treatment, " (N=", n, ")"))

# Create the demographic summary table
demographic_table <- data |> 
  # Join with treatment counts to include the labeled treatment names
  left_join(treatment_counts, by = "treatment") |>
  # Summarize age, female, and male counts and percentages by the labeled treatment
  group_by(treatment_label) |> 
  summarise(
    `Mean Age (SD)` = paste0(round(mean(age), 1), " (", round(sd(age), 1), ")"),
    `N Female (%)` = paste0(sum(gender == "Female"), " (", round(sum(gender == "Female") / n() * 100, 1), "%)"),
    `N Male (%)` = paste0(sum(gender == "Male"), " (", round(sum(gender == "Male") / n() * 100, 1), "%)"),
    .groups = "drop"
  ) |>
  # Transpose for easy review if needed
  t() |>
  print()

```

Bonus solution with {rtables}:

```{r}
#| eval: true
#| echo: true
library(rtables)
library(tern)

lyt <- basic_table() |> 
  split_cols_by("treatment") |> 
  analyze_vars(c("gender", "age"))

build_table(lyt, data)
```

# Exercise 2

Build a demographic table using {rtables} or {gtsummary}. Data is provided as follows:
```{r}
adsl <- random.cdisc.data::cadsl
advs <- random.cdisc.data::cadvs

# Pre-Processing - Add any variables needed in your table to df
adsl <- adsl |> 
  mutate(AGEGR1 = as.factor(case_when(
    AGE >= 17 & AGE < 65 ~ "≥17 to &lt;65",
    AGE >= 65 ~ "≥65",
    AGE >= 65 & AGE < 75 ~ "≥65 to &lt;75",
    AGE >= 75 ~ "≥75"
  )))

advs <- advs |> 
  filter(AVISIT == "BASELINE", VSTESTCD == "TEMP") |>
  select("USUBJID", "AVAL")

anl <- left_join(adsl, advs, by = "USUBJID")

df <- anl |>
  df_explicit_na()

vars <- c("SEX", "AGE", "AGEGR1", "RACE", "ETHNIC", "COUNTRY")
lbl_vars <- formatters::var_labels(df, fill = TRUE)[vars]

lyt <- basic_table(show_colcounts = TRUE) |>
  split_cols_by("ARM", split_fun = add_overall_level("Total Population", first = FALSE)) |>
  analyze_vars(
    vars = vars,
    var_labels = lbl_vars,
    show_labels = "visible",
    .stats = c("mean_sd", "median_range", "count_fraction"),
    .formats = NULL,
    na.rm = FALSE
  ) |>
  append_topleft("Characteristic")

tbl <- build_table(lyt, df = df) |> 
  prune_table()

tbl
```

```{r, eval=FALSE}
library(gtsummary)

df <- df |> df_explicit_na()
vars <- c("SEX", "AGE", "AGEGR1", "RACE", "ETHNIC", "COUNTRY")
lbl_vars <- formatters::var_labels(df, fill = TRUE)[vars]

tbl <- df  |> 
  select(c(vars, "ARM")) |> 
  tbl_summary(
    by = "ARM",
    type = all_continuous() ~ "continuous2",
    statistic = list(
      all_continuous() ~ c(
        "{mean} ({sd})",
        "{median} ({min} - {max})"
      ),
      all_categorical() ~ "{n} ({p}%)"
    ),
    digits = all_continuous() ~ 1,
    missing = "ifany",
    label = as.list(lbl_vars) |> setNames(vars)
  ) |>
  gtsummary::bold_labels() |>
  modify_header(all_stat_cols() ~ "**{level}**  \nN = {n}") |>
  add_overall(last = TRUE, col_label = paste0("**", "Total Population", "**  \nN = {n}")) |>
  gtsummary::add_stat_label(label = all_continuous2() ~ c("Mean (SD)", "Median (min - max)")) |>
  modify_footnote(update = everything() ~ NA) |>
  gtsummary::modify_column_alignment(columns = all_stat_cols(), align = "right")

tbl
```

# Exercise 3

Lets try now to build an ANCOVA efficacy table with a single visit and single endpoint.

[AOVT02 on the TLG-catalog](https://insightsengineering.github.io/tlg-catalog/stable/tables/efficacy/aovt02.html){preview-link="true" style="text-align: center"}

# Exercise 3 bonus

Use {teal} part: [AOVT02 on the TLG-catalog](https://insightsengineering.github.io/tlg-catalog/stable/tables/efficacy/aovt02.html){preview-link="true" style="text-align: center"}


# Exercise 3 wild bonus

Try to use the data from before (Exercise 1) to make your own teal app (tip: use `tm_t_summary`)
```{r, eval=FALSE}
library(teal.modules.clinical)
## Data reproducible code
data <- teal_data()
data <- within(data, {
  ADSL <- data.frame(
    STUDYID = 1:100,
    USUBJID = paste0("01-123-", 1:100),
    age = formatters::with_label(sample(18:80, 100, replace = TRUE), "Age"),
    gender = formatters::with_label(sample(c("Male", "Female"), 100, replace = TRUE), "Gender"),
    treatment = factor(sample(c("Treatment A", "Treatment B"), 100, replace = TRUE))
  )
})
datanames <- "ADSL"
datanames(data) <- datanames
join_keys(data) <- default_cdisc_join_keys[datanames]

## Setup App
app <- init(
  data = data,
  modules = modules(
    tm_t_summary(
      label = "Demographic Table",
      dataname = "ADSL",
      arm_var = choices_selected(c("treatment"), "treatment"),
      summarize_vars = choices_selected(
        c("age", "gender"),
        c("age", "gender")
      ),
      useNA = "ifany"
    )
  )
)

shinyApp(app$ui, app$server)

```

## Exercise 4 - Kaplan-Meier plot

Lets try now to create an efficacy Kaplan-Meier plot.

[KMG01](https://insightsengineering.github.io/tlg-catalog/stable/graphs/efficacy/kmg01.html)

## Exercise 5 - Try {teal.gallery}

[teal.gallery](https://insightsengineering.github.io/teal.gallery/)
