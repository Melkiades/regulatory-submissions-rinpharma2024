---
title: "Getting there: Exercises"
format: 
  html:
    code-fold: true
    code-summary: "Show the code solution"
---

# Instructions:

**Recommended:** Complete these exercises in the dedicated R in Pharma RStudio Cloud work space, which comes with

1. all packages pre-installed, and

2. an Rmarkdown document to fill in.

It may still be helpful to peek here to verify that your tables match the
desired output.

[Click here to enter R in Pharma RStudio Cloud work space for our workshop](https://rstudio.cloud/spaces/299322/join?access_code=Vnp96stsVIDLiEJI7AtHAQ4GB1gsptQgnOGb99_N){target="_blank"}

**Otherwise:** Follow along this document, work on your personal computer,
and challenge yourself not to peek at the code solutions until you have completed
the exercise.

# Exercise 1

Create a demographic table by using only dplyr. 

* The data should have only age, gender, and treatment columns. 
* The table should include the mean and standard deviation of age, the count and percentage.

```{r}
# Load necessary libraries
library(dplyr)

# Sample data frame with demographic data
set.seed(123)
data <- data.frame(
  id = 1:100,
  age = sample(18:80, 100, replace = TRUE),
  gender = sample(c("Male", "Female"), 100, replace = TRUE),
  treatment = sample(c("Treatment A", "Treatment B"), 100, replace = TRUE)
)

# Count participants per treatment group to get labels with counts
treatment_counts <- data |> 
  count(treatment) |> 
  mutate(treatment_label = paste0(treatment, " (N=", n, ")"))

# Create the demographic summary table
demographic_table <- data |> 
  # Join with treatment counts to include the labeled treatment names
  left_join(treatment_counts, by = "treatment") |>
  # Summarize age, female, and male counts and percentages by the labeled treatment
  group_by(treatment_label) |> 
  summarise(
    `Mean Age (SD)` = paste0(round(mean(age), 1), " (", round(sd(age), 1), ")"),
    `N Female (%)` = paste0(sum(gender == "Female"), " (", round(sum(gender == "Female") / n() * 100, 1), "%)"),
    `N Male (%)` = paste0(sum(gender == "Male"), " (", round(sum(gender == "Male") / n() * 100, 1), "%)"),
    .groups = "drop"
  ) |>
  # Transpose for easy review if needed
  t() |>
  print()

```
# Exercise 2

Build a demografic table using {rtables} or {gtsummary}. Data is provided as follows:
```{r}
# Load Libraries & Data
library(dplyr)

adsl <- random.cdisc.data::cadsl
advs <- random.cdisc.data::cadvs

# Pre-Processing - Add any variables needed in your table to df
adsl <- adsl |> 
  mutate(AGEGR1 = as.factor(case_when(
    AGE >= 17 & AGE < 65 ~ "≥17 to &lt;65",
    AGE >= 65 ~ "≥65",
    AGE >= 65 & AGE < 75 ~ "≥65 to &lt;75",
    AGE >= 75 ~ "≥75"
  )))

advs <- advs |> 
  filter(AVISIT == "BASELINE", VSTESTCD == "TEMP") %>%
  select("USUBJID", "AVAL")

anl <- left_join(adsl, advs, by = "USUBJID")
```
```{r, eval=FALSE}
  df <- df %>%
    filter(.data[[saffl_var]] == "Y") %>%
    df_explicit_na()

  alt_counts_df <- alt_counts_df_preproc(alt_counts_df, id_var, arm_var, saffl_var)

  lyt <- basic_table_annot(show_colcounts, annotations) %>%
    split_cols_by_arm(arm_var, lbl_overall) %>%
    analyze_vars(
      vars = vars,
      var_labels = lbl_vars,
      show_labels = "visible",
      .stats = c("mean_sd", "median_range", "count_fraction"),
      .formats = NULL,
      na.rm = na_rm
    ) %>%
    append_topleft("Characteristic")

  tbl <- build_table(lyt, df = df, alt_counts_df = alt_counts_df)
  if (prune_0) tbl <- prune_table(tbl)

  tbl
```

```{r, eval=FALSE}
df <- df %>% df_explicit_na()

tbl <- df %>%
  tbl_summary(
    by = arm_var,
    type = all_continuous() ~ "continuous2",
    statistic = list(
      all_continuous() ~ c(
        "{mean} ({sd})",
        "{median} ({min} - {max})"
      ),
      all_categorical() ~ "{n} ({p}%)"
    ),
    digits = all_continuous() ~ 1,
    missing = ifelse(na_rm, "no", "ifany"),
    label = as.list(lbl_vars) %>% setNames(vars)
  ) %>%
  gtsummary::bold_labels() %>%
  modify_header(all_stat_cols() ~ "**{level}**  \nN = {n}") %>%
  add_overall(last = TRUE, col_label = paste0("**", lbl_overall, "**  \nN = {n}")) %>%
  gtsummary::add_stat_label(label = all_continuous2() ~ c("Mean (SD)", "Median (min - max)")) %>%
  modify_footnote(update = everything() ~ NA) %>%
  gtsummary::modify_column_alignment(columns = all_stat_cols(), align = "right")

```

# Exercise 3

TLG-catalog

ADAE


# Exercise 4

teal and ADAE 

demographic teal.gallery
